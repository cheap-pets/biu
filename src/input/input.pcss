$inputYPaddingPx: calc(($inputHeightPx - $inputLineHeightPx - 2) / 2);

.mu-input {
  position: relative;
  z-index: 1;
  width: 200px;
  border: 1px solid $inputBorderColor;
  border-radius: $(inputBorderRadiusPx)px;
  outline: none;
  background-color: $inputBackground;
  color: $inputTextColor;
  line-height: $(inputLineHeightPx)px;
  font-size: $inputFontSize;
  &:hover,
  &:focus,
  &[focus] {
    border-color: $inputHoverBorderColor;
  }
  &:focus,
  &[focus] {
    z-index: 2;
    text-align: left !important;
    box-shadow: $inputShadow;
  }
  &[readonly] {
    background-color: $inputReadonlyBackground;
  }
  &[disabled] {
    background-color: $inputDisabledBackground;
    border-color: $inputBorderColor;
    color: $textGrey;
    box-shadow: none;
  }
  &::-ms-clear {
    display: none;
  }
}

[invalid] .mu-input,
.mu-input[invalid] {
  color: $dangerColor;
  border-color: $inputInvalidBorderColor;
  &:focus,
  &[focus] {
    box-shadow: $inputInvalidShadow;
  }
}
input.mu-input {
  height: $(inputHeightPx)px;
  padding-left: $(inputXPaddingPx)px;
  padding-right: $(inputXPaddingPx)px;
}

textarea.mu-input {
  padding: $(inputYPaddingPx)px $(inputXPaddingPx)px;
  min-height: 80px;
  resize: none;
}

.mu-input[input-shape="round"],
[input-shape="round"] > .mu-input {
  border-radius: calc($inputHeightPx / 2)px;
}
